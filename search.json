[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Statistics course notes",
    "section": "",
    "text": "0.1 Preface\nThis document is a set of course notes for several Applied Statistics courses at California State University, Chico. This is not a textbook replacement, and topics covered will vary depending on the instructor. To make this clear we use the term notebook to refer to this document so as not to be confused with a traditional textbook.\nSome data and examples in this notebook are drawn from Practical Multivariate Analysis, 6tth ed, Afifi, May, Donatello, Clark and used with permission by the authors.\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Applied Statistics</span>"
    ]
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "2  Workflow and Data Cleaning",
    "section": "",
    "text": "3 Workflow and Data Cleaning\nOnce the data are available from a study there are still a number of steps that must be undertaken to get them into shape for analysis.\nOne of the most misunderstood parts of the analysis process is the data preparation stage. To say that 70% of any analysis is spent on the data management stage is not an understatement.\nThis chapter provides information on topics related to data processing and corresponds to PMA6 Chapter 3.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#reproducible-workflows",
    "href": "explore.html#reproducible-workflows",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.1 Reproducible workflows",
    "text": "3.1 Reproducible workflows\nReproducibility is the ability for any researcher to take the same data set and run the same set of software program instructions as another researcher and achieve the same results.\nThe goal is to create an exact record of what was done to a data set to produce a specific result. To achieve reproducibility, we believe that three things must be present:\n\nThe un-processed data are connected directly to software code file(s) that perform data preparation techniques.\nThe processed data are connected directly to other software code file(s) that perform the analyses.\nAll data and code files are self-contained such that they could be given to another researcher to execute the code commands on a separate computer and achieve the same results as the original author.\n\n\n\n\nPrepareData\n\n\n Why do we need a codebook?\n\nYou are your own collaborator 6 months from now. Make sure you will be able to understand what you were doing.\nInvesting the time to do things clearly and in a reproducible manner will make your future self happy.\nComment your code with explanations and instructions.\n\nHow did you get from point A to B?\nWhy did you recode this variable in this manner?\n\nWe need to record those steps (not just for posterity).\nThis means your code must be saved in a script file.\n\nInclude sufficient notes to yourself describing what you are doing and why.\nFor R, this can be in a .R, .Rmd or .qmd file. I always prefer the latter.\nFor SPSS you can specify to paste the syntax and copy into a .sps script file.\nFor SAS you’ll use a .sas file\nFor STATA this will be a .do file\n\n\n\n\n\nRepro\n\n\nFigure Credits: Roger Peng\n\n3.1.1 Literate programming\n\nProgramming paradigm introduced by Knuth (1984)\nExplain the logic of the program or analysis process in a natural language,\nSmall code snippets included at each step act as a full set of instructions that can be executed to reproduce the result/analysis being discussed.\n\nLiterate programming tools are integrated into most common statistical packages\n\nMarkdown (R, Stata), Quarto (R, Python, others)\n\\(\\LaTeX\\) (R, SAS, Stata)\n\n\n\nThe current gold standard for writing reproducible literate documents in R is to use Quarto. This works with Python, julia and other code editing platforms.\n\nPracticing reproducible research techniques using literate programming tools allows such major updates to be a simple matter of re-compiling all coded instructions using the updated data set.\nThe effort then is reduced to a careful review and update of any written results.\nUsing literate programming tools create formatted documents\n\nsection headers\nbold and italicized words\ntables and graphics with built-in captions\n\nin a streamlined manner that is fully synchronized with the code itself.\nThe author writes the text explanations, interpretations, and code in the statistical software program itself, and the program will execute all commands and combine the text, code and output all together into a final dynamic document.\n What stages of the pipeline shown above can we conduct using literate programming tools?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#import-data",
    "href": "explore.html#import-data",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.2 Import data",
    "text": "3.2 Import data\nThis section uses the raw depression data set from the Afifi et.al. textbook. This is a tab-delimited data set, so we opt to use read.table here. We include arguments sep=\"\\t\" to indicate columns are separated with tabs and header=TRUE to indicate the first row of the data is the variable names.\nlibrary(ggplot2)  \ndepress_raw &lt;- read.table(\"https://norcalbiostat.netlify.com/data/Depress.txt\", \n                      sep=\"\\t\", header=TRUE)  \n\n\nLearn more See R for Data Science 2nd edit for more instruction on importing different types of data and ways you can streamline your data import. https://r4ds.hadley.nz/data-import\n\nThe absolute first thing you should do is to look at your raw data table. Are the column headers variable names? Did all the rows get read in? Are there any extra columns or rows included?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#data-management",
    "href": "explore.html#data-management",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.3 Data Management",
    "text": "3.3 Data Management\nQuestions to ask yourself while reviewing the codebook to choose variables to be used in an analysis.\n\nAre there codes that indicate missing? E.g. MISSING or -99?\nDo you need to make response codes more logical?\n\nSome systems will record 1=YES and 2=NO. This should be changed to 0=NO.\n\nDo you need to recode numerical variables to categorical?\n\nSometimes categorical data will be recorded as 1, 2, 3 etc when those numbers represent named categories.\n\nDo you need to create secondary variables such as an average across measures to create a score.\nAre the variable names user friendly? Mixtures of CAPS and lower case, names with spaces or special characters should all be changed.\n\nSome of these answers will come only after you look at your data. This can be looking at the raw data itself but also looking at tables and charts generated from the data. Often when you try to create a plot or table you will encounter an error or something odd looking that will be the notification that something has to be adjusted.\nThe next sections go over a few of the common data management processes, but is not comprehensive, and may only show one method for cleaning. There are always different ways to accomplish tasks.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#renaming-variable-names-for-sanity-sake",
    "href": "explore.html#renaming-variable-names-for-sanity-sake",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.4 Renaming variable names for sanity sake",
    "text": "3.4 Renaming variable names for sanity sake\nThe best method is to use the clean_names() function from the janitor package.\ndepress &lt;- depress_raw %&gt;% janitor::clean_names()\nA base R soluion is to use `tolower() to turn all variable names to lower case.\n## names(depress) &lt;- tolower(names(depress))\ntolower(\"ThIs MIXTure of CAPS and lowercase WILL alL be conVERteD to LoWeR CAsE\")\n## [1] \"this mixture of caps and lowercase will all be converted to lower case\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#identifying-variable-types",
    "href": "explore.html#identifying-variable-types",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.5 Identifying Variable Types",
    "text": "3.5 Identifying Variable Types\nThe str function is short for structure. This shows you the variable names, what data types R thinks each variable are, and some of the raw data.\nstr(depress)\n## 'data.frame':    294 obs. of  37 variables:\n##  $ id      : int  1 2 3 4 5 6 7 8 9 10 ...\n##  $ sex     : int  2 1 2 2 2 1 2 1 2 1 ...\n##  $ age     : int  68 58 45 50 33 24 58 22 47 30 ...\n##  $ marital : int  5 3 2 3 4 2 2 1 2 2 ...\n##  $ educat  : int  2 4 3 3 3 3 2 3 3 2 ...\n##  $ employ  : int  4 1 1 3 1 1 5 1 4 1 ...\n##  $ income  : int  4 15 28 9 35 11 11 9 23 35 ...\n##  $ relig   : int  1 1 1 1 1 1 1 1 2 4 ...\n##  $ c1      : int  0 0 0 0 0 0 2 0 0 0 ...\n##  $ c2      : int  0 0 0 0 0 0 1 1 1 0 ...\n##  $ c3      : int  0 1 0 0 0 0 1 2 1 0 ...\n##  $ c4      : int  0 0 0 0 0 0 2 0 0 0 ...\n##  $ c5      : int  0 0 1 1 0 0 1 2 0 0 ...\n##  $ c6      : int  0 0 0 1 0 0 0 1 3 0 ...\n##  $ c7      : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ c8      : int  0 0 0 3 3 0 2 0 0 0 ...\n##  $ c9      : int  0 0 0 0 3 1 2 0 0 0 ...\n##  $ c10     : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ c11     : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ c12     : int  0 1 0 0 0 1 0 0 3 0 ...\n##  $ c13     : int  0 0 0 0 0 2 0 0 0 0 ...\n##  $ c14     : int  0 0 1 0 0 0 0 0 3 0 ...\n##  $ c15     : int  0 1 1 0 0 0 3 0 2 0 ...\n##  $ c16     : int  0 0 1 0 0 2 0 1 3 0 ...\n##  $ c17     : int  0 1 0 0 0 1 0 1 0 0 ...\n##  $ c18     : int  0 0 0 0 0 0 0 1 0 0 ...\n##  $ c19     : int  0 0 0 0 0 0 0 1 0 0 ...\n##  $ c20     : int  0 0 0 0 0 0 1 0 0 0 ...\n##  $ cesd    : int  0 4 4 5 6 7 15 10 16 0 ...\n##  $ cases   : int  0 0 0 0 0 0 0 0 1 0 ...\n##  $ drink   : int  2 1 1 2 1 1 2 2 1 1 ...\n##  $ health  : int  2 1 2 1 1 1 3 1 4 1 ...\n##  $ regdoc  : int  1 1 1 1 1 1 1 2 1 1 ...\n##  $ treat   : int  1 1 1 2 1 1 1 2 1 2 ...\n##  $ beddays : int  0 0 0 0 1 0 0 0 1 0 ...\n##  $ acuteill: int  0 0 0 0 1 1 1 1 0 0 ...\n##  $ chronill: int  1 1 0 1 0 1 1 0 1 0 ...\nA tidyverse alternative is glimpse()\nglimpse(depress)\n## Rows: 294\n## Columns: 37\n## $ id       &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n## $ sex      &lt;int&gt; 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2…\n## $ age      &lt;int&gt; 68, 58, 45, 50, 33, 24, 58, 22, 47, 30, 20, 57, 39, 61, 23, 2…\n## $ marital  &lt;int&gt; 5, 3, 2, 3, 4, 2, 2, 1, 2, 2, 1, 2, 2, 5, 2, 1, 1, 4, 1, 5, 1…\n## $ educat   &lt;int&gt; 2, 4, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 2, 3, 3, 2, 4, 2, 6, 2, 3…\n## $ employ   &lt;int&gt; 4, 1, 1, 3, 1, 1, 5, 1, 4, 1, 3, 2, 1, 4, 1, 1, 1, 3, 1, 4, 1…\n## $ income   &lt;int&gt; 4, 15, 28, 9, 35, 11, 11, 9, 23, 35, 25, 24, 28, 13, 15, 6, 8…\n## $ relig    &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 1, 1, 1, 2, 1, 1, 1, 1, 4, 2…\n## $ c1       &lt;int&gt; 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 3, 1, 0, 0, 0…\n## $ c2       &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 3, 0, 0, 0, 0…\n## $ c3       &lt;int&gt; 0, 1, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0…\n## $ c4       &lt;int&gt; 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0…\n## $ c5       &lt;int&gt; 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 1, 0, 1, 3, 1, 0, 0, 0…\n## $ c6       &lt;int&gt; 0, 0, 0, 1, 0, 0, 0, 1, 3, 0, 2, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0…\n## $ c7       &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0…\n## $ c8       &lt;int&gt; 0, 0, 0, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 3, 0…\n## $ c9       &lt;int&gt; 0, 0, 0, 0, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3…\n## $ c10      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0…\n## $ c11      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0…\n## $ c12      &lt;int&gt; 0, 1, 0, 0, 0, 1, 0, 0, 3, 0, 1, 0, 1, 1, 0, 1, 2, 0, 0, 0, 0…\n## $ c13      &lt;int&gt; 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0…\n## $ c14      &lt;int&gt; 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0…\n## $ c15      &lt;int&gt; 0, 1, 1, 0, 0, 0, 3, 0, 2, 0, 1, 2, 0, 0, 1, 1, 3, 0, 0, 0, 0…\n## $ c16      &lt;int&gt; 0, 0, 1, 0, 0, 2, 0, 1, 3, 0, 1, 2, 1, 0, 3, 1, 2, 0, 0, 0, 0…\n## $ c17      &lt;int&gt; 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0…\n## $ c18      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0…\n## $ c19      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0…\n## $ c20      &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 0, 0…\n## $ cesd     &lt;int&gt; 0, 4, 4, 5, 6, 7, 15, 10, 16, 0, 18, 4, 8, 4, 8, 21, 42, 6, 0…\n## $ cases    &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0…\n## $ drink    &lt;int&gt; 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1…\n## $ health   &lt;int&gt; 2, 1, 2, 1, 1, 1, 3, 1, 4, 1, 2, 2, 3, 1, 1, 3, 1, 3, 2, 2, 1…\n## $ regdoc   &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1…\n## $ treat    &lt;int&gt; 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1…\n## $ beddays  &lt;int&gt; 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0…\n## $ acuteill &lt;int&gt; 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0…\n## $ chronill &lt;int&gt; 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1…\nRight away this tells me that R thinks all variables are numeric integers, not categorical variables. Many of these will have to be changed. We’ll get to that in a moment.\nJust check the data type of one variable\ntypeof(depress$marital)\n## [1] \"integer\"\nclass(depress$age)\n## [1] \"integer\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#convert-number-to-factor",
    "href": "explore.html#convert-number-to-factor",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.6 Convert number to factor",
    "text": "3.6 Convert number to factor\nWhen variables have numerical levels it is necessary to ensure that the program knows it is a factor variable.\nThe following code uses the factor() function to take the marital status variable and convert it into a factor variable with specified labels that match the codebook.\ndepress$marital &lt;- factor(depress$marital, \n      labels = c(\"Never Married\", \"Married\", \"Divorced\", \"Separated\", \"Widowed\"))\nIt is important to confirm the recode worked. If it did not you will have to re-read in the raw data set again since the variable marital was replaced.\ntable(depress$marital)\n## \n## Never Married       Married      Divorced     Separated       Widowed \n##            73           127            43            13            38\nclass(depress$marital)\n## [1] \"factor\"\nSee more examples on Math 130 Lesson 06",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#identifying-outliers",
    "href": "explore.html#identifying-outliers",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.7 Identifying Outliers",
    "text": "3.7 Identifying Outliers\nLet’s look at the age variable in the depression data set.\npar(mfrow=c(1,2))\nboxplot(depress$age)\nhist(depress$age)\n\nJust looking at the data graphically raises no red flags. The boxplot shows no outlying values and the histogram does not look wildly skewed. This is where knowledge about the data set is essential. The codebook does not provide a valid range for the data, but the description of the data starting on page 3 in the textbook clarifies that this data set is on adults. In the research world, this specifies 18 years or older.\nNow look back at the graphics. See anything odd? It appears as if the data go pretty far below 20, possibly below 18. Let’s check the numerical summary to get more details.\nsummary(depress$age)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    9.00   28.00   42.50   44.38   59.00   89.00\nThe minimum value is a 9, which is outside the range of valid values for this variable. This is where you, as a statistician, data analyst or researcher goes back to the PI and asks for advice. Should this data be set to missing, or edited in a way that changes this data point into a valid piece of data.\nAnother example\nboxplot(depress$income)\n\nWhile there is at least one potential outliers (denoted by the dots), there are none so far away from the rest of the group (or at values such as 99 or -99 that may indicate missing codes) that we need to be concerned about.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#changing-numeric-values",
    "href": "explore.html#changing-numeric-values",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.8 Changing numeric values",
    "text": "3.8 Changing numeric values\nAs an example of a common data entry error, and for demonstration purposes, I went in and changed a 19 to a 9. So the correct thing to do here is to change that 9, back to a 19. This is a very good use of the ifelse() function.\ndepress$age &lt;- ifelse(depress$age==9, 19, depress$age)\nThe logical statement is depress$age9. Wherever this is true, replace the value of depress$age with 19, wherever this is false then keep the value of depress$age unchanged (by “replacing” the new value with the same old value).\nAlternatively, you can change that one value using bracket notation. Here you are specifying that you only want the rows where age==9, and directly assign a value of 19 to those rows.\ndepress$age[depress$age==9] &lt;- 19\nConfirm the recode.\nsummary(depress$age)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   18.00   28.00   42.50   44.41   59.00   89.00\nLooks like it worked.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#creating-secondary-variables",
    "href": "explore.html#creating-secondary-variables",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.9 Creating secondary variables",
    "text": "3.9 Creating secondary variables\nSee Math 130 lesson 05 for now.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#wrangling-factors",
    "href": "explore.html#wrangling-factors",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.10 Wrangling Factors",
    "text": "3.10 Wrangling Factors\nFor more help on renaming, releveling, lumping, and removing levels see Math 130 lesson 06 for now. Also the forcats vignette.\n\n3.10.1 Collapsing categorical variables into fewer categories\nFor unbiased and accurate results of a statistical analysis, sufficient data has to be present. Often times once you start slicing and dicing the data to only look at certain groups, or if you are interested in the behavior of certain variables across levels of another variable, sometimes you start to run into small sample size problems.\nFor example, consider marital status again. There are only 13 people who report being separated. This could potentially be too small of a group size for valid statistical analysis. One way to deal with insufficient data within a certain category is to collapse categories. The following code uses the recode() function from the car package to create a new variable that I am calling marital2 that combines the Divorced and Separated levels.\n\n⚠️ Note: See Math 130 lesson 06 for a better method using forcats\n\nlibrary(car)\nmarital2 &lt;- recode(depress$marital, \"'Divorced' = 'Sep/Div'; 'Separated' = 'Sep/Div'\")\nAlways confirm your recodes. Check a table of the old variable (marital) against the new one marital2.\ntable(depress$marital, marital2, useNA=\"always\")\n##                marital2\n##                 Married Never Married Sep/Div Widowed &lt;NA&gt;\n##   Never Married       0            73       0       0    0\n##   Married           127             0       0       0    0\n##   Divorced            0             0      43       0    0\n##   Separated           0             0      13       0    0\n##   Widowed             0             0       0      38    0\n##   &lt;NA&gt;                0             0       0       0    0\nThis confirms that records where marital (rows) is Divorced or Separated have the value of Sep/Div for marital2 (columns). And that no missing data crept up in the process. Now I can drop the temporary marital2 variable and actually fix marital. (keeping it clean)\ndepress$marital &lt;- recode(depress$marital, \"'Divorced' = 'Sep/Div'; 'Separated' = 'Sep/Div'\")\nrm(marital2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#binning-a-continuous-variable-into-categorical-ranges.",
    "href": "explore.html#binning-a-continuous-variable-into-categorical-ranges.",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.11 Binning a continuous variable into categorical ranges.",
    "text": "3.11 Binning a continuous variable into categorical ranges.\nWe can use the cut function to create a new variable that categorizes income into the following ranges: &lt;30, [30, 40), [40,50), [50, 60), 60+.\ndepress$inc_cut &lt;- cut(depress$income, breaks=c(0, 30,40,50,60, 100))\ntable(depress$inc_cut)\n## \n##   (0,30]  (30,40]  (40,50]  (50,60] (60,100] \n##      231       28       16        9       10",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#dichotomizing-a-measure-into-2-categories",
    "href": "explore.html#dichotomizing-a-measure-into-2-categories",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.12 Dichotomizing a measure into 2 categories",
    "text": "3.12 Dichotomizing a measure into 2 categories\nDichotomous variables tend to be binary indicator variables where a code of 1 is the level you’re interested in.\nFor example, in this study gender is coded as 2=Female and 1=Male. (This data was collected in the ’70s, and so only two genders were provided as options). We want to convert this 1=Female and 0=Male.\ndepress$sex &lt;- depress$sex -1 \ntable(depress$sex)\n## \n##   0   1 \n## 111 183\n0/1 binary coding is mandatory for many analyses. One simple reason is that now you can calculate the mean and interpret it as a proportion.\nmean(depress$sex)\n## [1] 0.622449\n62% of individuals in this data set are female.\nSometimes the data is recorded as 1/2 (Yes/No), so just subtracting from 1 doesn’t create a positive indicator of the variable. For example, drink=1 if they are a regular drinker, and drink=2 if they are not. We want not drinking to be coded as 0, not 2.\ntable(depress$drink)\n## \n##   1   2 \n## 234  60\nThe ifelse() function says that if depress$DRINK has a value equal to 2 ==2, then change the value to 0. Otherwise leave it alone.\ndepress$drink &lt;- ifelse(depress$drink==2, 0, depress$drink)\ntable(depress$drink)\n## \n##   0   1 \n##  60 234",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#sum-or-average-values-across-multiple-variables",
    "href": "explore.html#sum-or-average-values-across-multiple-variables",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.13 Sum or Average values across multiple variables",
    "text": "3.13 Sum or Average values across multiple variables\nThe Center for Epidemiological Studies Depression Scale (CESD) is series of questions asked to a person to measure their level of depression. CESD is calculated as the sum of all 20 component variables, and is already on this data set. Let’s create a new variable named sleep as subscale for sleep quality by adding up question numbers 5, 11, and 19.\nReference: http://cesd-r.com/cesdr/\ndepress$sleep &lt;- depress$c5 + depress$c11 + depress$c19\n## # depress &lt;- depress %&gt;% mutate(sleep = c5+c11+c19) # Not run. dplyr example\n## # depress &lt;- depress %&gt;% mutate(across(c(c5, c11, c19), mean)) # Not run, across() example\nsummary(depress$sleep)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   0.000   0.000   1.000   1.167   2.000   7.000",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#transformations-for-normality",
    "href": "explore.html#transformations-for-normality",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.14 Transformations for Normality",
    "text": "3.14 Transformations for Normality\nLet’s look at assessing normal distributions using the cleaned depression data set.\nhist(depress$income, prob=TRUE, xlab=\"Annual income (in thousands)\", \n     main=\"Histogram and Density curve of Income\", ylab=\"\")\nlines(density(depress$income), col=\"blue\")\n\nsummary(depress$income)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    2.00    9.00   15.00   20.57   28.00   65.00\nThe distribution of annual income is slightly skewed right with a mean of $20.5k per year and a median of $15k per year income. The range of values goes from $2k to $65k. Reported income above $40k appear to have been rounded to the nearest $10k, because there are noticeable peaks at $40k, $50k, and $60k.\nIn general, transformations are more effective when the the standard deviation is large relative to the mean. One rule of thumb is if the sd/mean ratio is less than 1/4, a transformation may not be necessary.\nsd(depress$income) / mean(depress$income)\n## [1] 0.743147\nAlternatively Hoaglin, Mosteller and Tukey (1985) showed that if the largest observation divided by the smallest observation is over 2, then the data may not be sufficiently variable for the transformation to be decisive.\nmax(depress$income) / (min(depress$income)+.1)\n## [1] 30.95238\nNote these rules are not meaningful for data without a natural zero.\nAnother common method of assessing normality is to create a normal probability (or normal quantile) plot.\nqqnorm(depress$income);qqline(depress$income, col=\"red\")\n\nThe points on the normal probability plot do not follow the red reference line very well. The dots show a more curved, or U shaped form rather than following a linear line. This is another indication that the data is skewed and a transformation for normality should be created.\n\nCreate three new variables: log10inc as the log base 10 of Income, loginc as the natural log of Income, and xincome which is equal to the negative of one divided by the cubic root of income.\n\nlog10inc &lt;- log10(depress$income)\nloginc   &lt;- log(depress$income)\nxincome  &lt;- -1/(depress$income)^(-1/3)\n\nCreate a single plot that display normal probability plots for the original, and each of the three transformations of income. Use the base graphics grid organizer par(mfrow=c(r,c)) where r is the number of rows and c is the number of columns. Which transformation does a better job of normalizing the distribution of Income?\n\npar(mfrow=c(2,2)) # Try (4,1) and (1,4) to see how this works. \nqqnorm(depress$income, main=\"Income\"); qqline(depress$income,col=\"blue\")\nqqnorm(log10inc, main=\"Log 10\"); qqline(log10inc, col=\"blue\")\nqqnorm(loginc, main = \"Natural Log\"); qqline(loginc, col=\"blue\")\nqqnorm(xincome, main=\"-1/cuberoot(income)\"); qqline(xincome, col=\"blue\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#export-and-save",
    "href": "explore.html#export-and-save",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.15 Export and Save",
    "text": "3.15 Export and Save\nYou’ve just made a ton of changes!\n\nSave or export the new data set to your computer.\nEdit the codebook to reflect the changes that you made.\nKeep the data, codebook and data management file in the same folder.\n\ndepress_clean &lt;- depress %&gt;% select(var1, var2, var3)\n\n# Save as a .Rdata file for later use in R\nsave(depress_clean, \"data/depress_clean.Rdata\") \nNow every time you run your data cleaning script file, it will make all the changes and save/overwrite the depress_clean.Rdata data file. This ensures that any analysis script that uses this data has the most up to date varibles.\nNeed to export to a different software program? Look into the haven package.\nSPSS users commonly save cleaned data as a .sav format.\nSAVE outfile='FilePath\\depress_sysdate.sav'\n/KEEP = Variable_Name1 Variable_Name2.\nEXECUTE.\nSaving only selected variables\n\nIn SPSS the /KEEP statement demonstrated above only writes the variable names listed to the saved data set. This can be very useful when dealing with data sets with a large number of variables.\nFor R users, using dplyr select is generally the fastest.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#wide-long",
    "href": "explore.html#wide-long",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.16 Wide vs. Long data",
    "text": "3.16 Wide vs. Long data\nRead more on tidy data here: https://r4ds.hadley.nz/data-tidy\nThe data on Lung function originally was recorded in wide format, with separate variables for mother’s and father’s FEV1 score (MFEV1 and FFEV). In this format, the data is one record per family.\nfev &lt;- read.delim(\"https://norcalbiostat.netlify.com/data/Lung_081217.txt\", \n                    sep=\"\\t\", header=TRUE)\nhead(fev)\n##   ID AREA FSEX FAGE FHEIGHT FWEIGHT FFVC FFEV1 MSEX MAGE MHEIGHT MWEIGHT MFVC\n## 1  1    1    1   53      61     161  391  3.23    2   43      62     136  370\n## 2  2    1    1   40      72     198  441  3.95    2   38      66     160  411\n## 3  3    1    1   26      69     210  445  3.47    2   27      59     114  309\n## 4  4    1    1   34      68     187  433  3.74    2   36      58     123  265\n## 5  5    1    1   46      61     121  354  2.90    2   39      62     128  245\n## 6  6    1    1   44      72     153  610  4.91    2   36      66     125  349\n##   MFEV1 OCSEX OCAGE OCHEIGHT OCWEIGHT OCFVC OCFEV1 MCSEX MCAGE MCHEIGHT\n## 1  3.31     2    12       59      115   296   2.79    NA    NA       NA\n## 2  3.47     1    10       56       66   323   2.39    NA    NA       NA\n## 3  2.65     1     8       50       59   114   1.11    NA    NA       NA\n## 4  2.06     2    11       57      106   256   1.85     1     9       49\n## 5  2.33     1    16       61       88   260   2.47     2    12       60\n## 6  3.06     1    15       67      100   389   3.55     1    13       57\n##   MCWEIGHT MCFVC MCFEV1 YCSEX YCAGE YCHEIGHT YCWEIGHT YCFVC YCFEV1\n## 1       NA    NA     NA    NA    NA       NA       NA    NA     NA\n## 2       NA    NA     NA    NA    NA       NA       NA    NA     NA\n## 3       NA    NA     NA    NA    NA       NA       NA    NA     NA\n## 4       56   159   1.30    NA    NA       NA       NA    NA     NA\n## 5       85   268   2.34     2    10       50       53   154   1.43\n## 6       87   276   2.37     2    10       55       72   195   1.69\nTo analyze the effect of gender on FEV, the data need to be in long format, with a single variable for fev and a separate variable for gender. The following code chunk demonstrates one method of combining data on height, gender, age and FEV1 for both males and females.\nfev2 &lt;- data.frame(gender = c(fev$FSEX, fev$MSEX), \n                   rev = c(fev$FFEV1, fev$MFEV1), \n                   ht = c(fev$FHEIGHT, fev$MHEIGHT), \n                   age = c(fev$FAGE, fev$MAGE))\nfev2$gender &lt;- factor(fev2$gender, labels=c(\"M\", \"F\"))\nhead(fev2)  \n##   gender  rev ht age\n## 1      M 3.23 61  53\n## 2      M 3.95 72  40\n## 3      M 3.47 69  26\n## 4      M 3.74 68  34\n## 5      M 2.90 61  46\n## 6      M 4.91 72  44\nNearly all analysis procedures and most graphing procedures require the data to be in long format. There are several R packages that can help with this including reshape2 and tidyr.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  },
  {
    "objectID": "explore.html#missing-data",
    "href": "explore.html#missing-data",
    "title": "2  Workflow and Data Cleaning",
    "section": "3.17 Missing data",
    "text": "3.17 Missing data\n\n3.17.1 Identifying missing data\nIn Excel, missing data can show up as a blank cell. In SPSS it is represented as a . period. R displays missing data as NA values.\nMissing Data in SPSS: https://stats.idre.ucla.edu/spss/modules/missing-data/\nWhy would data be missing? Other than the obvious data entry errors, tech glitches or just non-cooperative plants or people, sometimes values are out of range and you would rather delete them than change their value (data edit).\nLets look at the religion variable in the depression data set.\ntable(depress$relig, useNA=\"always\")\n## \n##    1    2    3    4    6 &lt;NA&gt; \n##  155   51   30   56    2    0\nLooking at the codebook, there is no category 6 for religion. Let’s change all values to NA.\ndepress$relig[depress$relig==6] &lt;- NA\nThis code says take all rows where relig is equal to 6, and change them to NA.\nConfirm recode.\ntable(depress$relig, useNA=\"always\")\n## \n##    1    2    3    4 &lt;NA&gt; \n##  155   51   30   56    2\nNotice the use of the useNA=\"always\" argument. If we just looked at the base table without this argument, we would have never known there was missing data!\ntable(depress$relig)\n## \n##   1   2   3   4 \n## 155  51  30  56\nWhat about continuous variables? Well there happens to be no other missing data in this data set, so let’s make up a set of 7 data points stored in a variable named y.\ny &lt;- c(1, 2, 3, NA, 4, NA, 6)\ny\n## [1]  1  2  3 NA  4 NA  6\nThe #1 way to identify missing data in a continuous variable is by looking at the summary() values.\nmean(y)\n## [1] NA\nsummary(y)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##     1.0     2.0     3.0     3.2     4.0     6.0       2\nmean(y, na.rm=TRUE)\n## [1] 3.2\nIn R, any arithmetic function (like addition, multiplication) on missing data results in a missing value. The na.rm=TRUE toggle tells R to calculate the complete case mean. This is a biased measure of the mean, but missing data is a topic worthy of it’s own course and is introduced in Chapter @ref(mda).\n\n\n3.17.2 Model predictions\nSituation: You want to add model predictions to the data set, but you have missing data that was automatically dropped prior to analysis.\n\n\n3.17.3 Regression\nR objects created by methods such as lm and glm will store the data used in the model in the model object itself in model$data. See Chapter @ref(binary-classification) for an example.\n\n\n3.17.4 Factor Analysis and Principle Components\nIf your original data had missing values, here is one way to get the PC’s / factor scores for available data back onto the data set.\nMethod 1) Create an ID column and merge new variables onto original data. (add columns)\n\nIf no ID column exists, create one on the original dataset id = 1:NROW(data)\nUse select() to extract the ID and all variables used in the factor analysis, then do a na.omit() to drop rows with any missing data. Save this as a new complete case data set.\nConduct PCA / Factor analysis on this new complete case data set (MINUS THE ID). Extract the PCs or factor scores.\nUse bind_cols() to add the ID variable to the data containing factor scores.\nThen left_join(original_data, factor_score_data) the factor scores back to the original data, using the ID variable as the joining key.\n\nMethod 2) Split the data, analyze one part then concatenate back together. (add rows)\n\nUse the complete.cases() function to create a boolean vector for if each row is complete\nSplit the data into complete and incomplete.\nDo the analysis on the complete rows, extracting the PC’s/Factors\nAdd the PC/Factor data onto the complete rows using bind_cols\nThen bind_rows the two parts back together.\n\ncc.idx &lt;- hiv %&gt;% select(starts_with(\"pb\")) %&gt;% complete.cases() # 1\n\ncomplete.rows &lt;- hiv[cc.idx,] #2\nincomplete.rows &lt;- hiv[!cc.idx,]\n\npc.scores &lt;- princomp(pb)$scores #3 \n\ncomplete.add.pc &lt;- bind_cols(complete.rows, pc.scores) #4\n\nhiv.with.pcs &lt;- bind_rows(complete.add.pc, incomplete.rows) #5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow and Data Cleaning</span>"
    ]
  }
]