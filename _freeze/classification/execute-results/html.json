{
  "hash": "9a24f02de91030a4043619cbfd2049c9",
  "result": {
    "engine": "knitr",
    "markdown": "# Classification of Binary outcomes {#sec-binary-classification}\n\n:::{.callout-note}\n#### Packages Used\nThis chapter uses the following packages:\n[ROCR](https://rocr.bioinf.mpi-sb.mpg.de/) to create ROC curves,\n[caret](https://topepo.github.io/caret/index.html) package to create a confusion matrix,\n[ggpubr](https://rpkgs.datanovia.com/ggpubr/) for some nicer plots,\n[pander](https://cran.r-project.org/web/packages/pander/vignettes/pander.html),\nand the cleaned 'depression' data set.\n:::\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Predicted Probabilities\n\n* Sometimes Odds Ratios can be difficult to interpret or understand. \n* Sometimes you just want to report the probability of the event occurring. \n* Or sometimes you want to predict whether or not a new individual is going to have the event. \n\nFor all of these, we need to calculate $p_{i} = P(y_{i}=1)$, the probability of the event. \nBack solving the logistic model for $p_{i} = e^{\\beta X} / (1+e^{\\beta X})$ gives us the probability of an event. \n\n$$\np_{i} = \\frac{e^{\\beta_{0} + \\beta_{1}x_{1i} + \\beta_{2}x_{2i} + \\ldots + \\beta_{p}x_{pi}}}\n{1 + e^{\\beta_{0} + \\beta_{1}x_{1i} + \\beta_{2}x_{2i} + \\ldots + \\beta_{p}x_{pi}}}\n$$\n\nConsider the main effects model of depression on age, income and sex from @sec-mlogreg\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n--------------------------------------------------------------\n     &nbsp;        Estimate   Std. Error   z value   Pr(>|z|) \n----------------- ---------- ------------ --------- ----------\n **(Intercept)**   -0.6765      0.5788     -1.169     0.2425  \n\n     **age**       -0.02096    0.00904     -2.318    0.02043  \n\n   **income**      -0.03656    0.01409     -2.595    0.009457 \n\n  **sexFemale**     0.9294      0.3858      2.409     0.016   \n--------------------------------------------------------------\n\n\n(Dispersion parameter for  binomial  family taken to be  1 )\n\n\n-------------------- ---------------------------\n   Null deviance:     268.1  on 293  degrees of \n                               freedom          \n\n Residual deviance:   247.5  on 290  degrees of \n                               freedom          \n-------------------- ---------------------------\n\n\n:::\n:::\n\n\n\n\n\nThe predicted probability of depression is calculated as: \n$$\nP(depressed) = \\frac{e^{-0.676 - 0.02096*age - .03656*income + 0.92945*sex}}\n{1 + e^{-0.676 - 0.02096*age - .03656*income + 0.92945*sex}}\n$$\n\nNotice this formulation requires you to specify a _covariate profile_. In other words, what value X take on for each record. Often when you are only concerned with comparing the effect of a single measures, you set all other measures equal to their means. \n\nLet's compare the probability of being depressed for males and females separately, while holding age and income constant at the average value calculated across all individuals (regardless of sex). \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndepress_clean %>% summarize(age=mean(age), income=mean(income))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       age   income\n1 44.41497 20.57483\n```\n\n\n:::\n:::\n\n\n\n\n\nPlug the coefficient estimates and the values of the variables into the equation and calculate. \n$$\nP(depressed|Female) = \\frac{e^{-0.676 - 0.02096(44.4) - .03656(20.6) + 0.92945(1)}}\n{1 + e^{-0.676 - 0.02096(44.4) - .03656(20.6) + 0.92945(1)}}\n$$\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXB.f <- -0.676 - 0.02096*(44.4) - .03656*(20.6) + 0.92945\nexp(XB.f) / (1+exp(XB.f))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1930504\n```\n\n\n:::\n:::\n\n\n\n\n$$\nP(depressed|Male) = \\frac{e^{-0.676 - 0.02096(44.4) - .03656(20.6) + 0.92945(0)}}\n{1 + e^{-0.676 - 0.02096(44.4) - .03656(20.6) + 0.92945(0)}}\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXB.m <- -0.676 - 0.02096*(44.4) - .03656*(20.6)\nexp(XB.m) / (1+exp(XB.m))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08629312\n```\n\n\n:::\n:::\n\n\n\n\n\nThe probability for a 44.4 year old female who makes $20.6k annual income has a 0.19 probability of being depressed. The probability of depression for a male of equal age and income is 0.086. \n\n\n## Distribution of Predicted probabilities\n\nWe know that not everyone in the data set is 44.4 years old and makes $20.6k annually (thankfully). So what if you want to get the model predicted probability of the event for all individuals in the data set? There's no way I'm doing that calculation for every person in the data set. \n\nWe can use the `predict()` command to generate a vector of predictions $\\hat{p}_{i}$ for each row used in the model. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphat.depr <- predict(dep_sex_model, type='response') # create prediction vector\nsummary(phat.depr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.01271 0.08352 0.16303 0.17007 0.23145 0.45082 \n```\n\n\n:::\n\n```{.r .cell-code}\nhist(phat.depr) # base R histogram\nabline(v = mean(phat.depr), col = \"blue\", lwd = 2) # add mean\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe average predicted probability of showing symptoms of depression is 0.17. \n\n### Plotting predictions against covariates\n\nAnother important feature to look at is to see how well the model discriminates between the two groups in terms of predicted probabilities. Let's look at a plot: \n\n::: {.cell type='rmdcaution'}\n\\BeginKnitrBlock{rmdcaution}<div class=\"rmdcaution\">Any row with missing data on any variable used in the model will be dropped, and so NOT get a predicted value. So the tactic is to use the data stored in the model object.</div>\\EndKnitrBlock{rmdcaution}\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.pred.data <- cbind(dep_sex_model$data, phat.depr)\ntail(names(model.pred.data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"treat\"     \"beddays\"   \"acuteill\"  \"chronill\"  \"sleep\"     \"phat.depr\"\n```\n\n\n:::\n:::\n\n\n\n\n\nNow that the predictions have been added back onto the data used in the model using `cbind`, we have covariates to use to plot the predictions against. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpubr::ggdensity(model.pred.data, x=\"phat.depr\", add=\"mean\", rug = TRUE, \n          color = \"sex\", fill = \"sex\", palette = c(\"#00AFBB\", \"#E7B800\"))\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n::: {.callout-caution}\n## Think about it\n* What do you notice in this plot?\n* What can you infer? \n\n:::\n\n## Predicted Class (outcome)\n\nTo classify individual $i$ as being depressed or not, we draw a binary value ($x_{i} = 0$ or $1$), with probability $p_{i}$ by using the `rbinom` function, with a `size=1`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345) #reminder: change the combo on my luggage\nplot.mpp <- data.frame(pred.prob = phat.depr, \n                       pred.class = rbinom(n = length(phat.depr), \n                                           size = 1, \n                                           p = phat.depr),\n                       truth = dep_sex_model$y)\nhead(plot.mpp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   pred.prob pred.class truth\n1 0.21108906          0     0\n2 0.08014012          0     0\n3 0.15266203          0     0\n4 0.24527840          1     0\n5 0.15208679          0     0\n6 0.17056409          0     0\n```\n\n\n:::\n:::\n\n\n\n\n\nApplying class labels and creating a cross table of predicted vs truth: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.mpp <- plot.mpp %>% \n            mutate(pred.class = factor(pred.class, labels=c(\"Not Depressed\", \n                                                            \"Depressed\")), \n                    truth = factor(truth, labels=c(\"Not Depressed\", \n                                                   \"Depressed\")))\n\ntable(plot.mpp$pred.class, plot.mpp$truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               \n                Not Depressed Depressed\n  Not Depressed           195        35\n  Depressed                49        15\n```\n\n\n:::\n:::\n\n\n\n\n\nThe model correctly identified 195 individuals as not depressed and 15 as depressed. The model got it wrong 49 + 35 times. \n\nThe **accuracy** of the model is calculated as the fraction of times the model prediction matches the observed category: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(195+15)/(195+35+49+15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7142857\n```\n\n\n:::\n:::\n\n\n\n\n\nThis model has a 71.4% accuracy. \n\n::: {.callout-caution}\n## Think about it\nIs this good? What if death were the event? \n\n:::\n \n\n## Confusion Matrix\n\nA confusion Matrix is the 2x2 table that compares the predicted classes to the true classes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(plot.mpp$pred.class, plot.mpp$truth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               \n                Not Depressed Depressed\n  Not Depressed           195        35\n  Depressed                49        15\n```\n\n\n:::\n:::\n\n\n\n\n\nThis table was generated by drawing a random Bernoulli variable with probability $p_{i}$. This assumes that probabilities can range from [0,1], but if you look at the plots above, the predicted probabilities max out around 0.5. \n\nOften we adjust the cutoff value to improve accuracy. This is where we have to put our gut feeling of what probability constitutes \"high risk\". For some models, this could be as low as 30%. It's whatever the probability is that optimally separates the classes. This is an important tuning parameter because since the models we build are only based on data we measured, often there are other unmeasured confounding factors that affect the predicted probability. So our predictions don't span the full range from [0,1]. \n\n::: {.callout-caution}\n## Think about it\nUsing the above plots, where should we put the cutoff value? At what probability should we classify a record as \"depressed\"?\n\n:::\n\nThere are many different types of criteria that can be used to find the optimal cutoff value. But first we need to understand the expanded borders of a [[Confusion Matrix]](https://en.wikipedia.org/wiki/Confusion_matrix). \nUsing the `confusionMatrix` function inside the `caret` package performs all these calculations for us.\n\n::: {.callout-warning}\nYou must specify what the 'event' is. \nThis is also another place where the factor ordering of binary variables can cause headache. Another reason to control your factors!\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfusionMatrix(plot.mpp$pred.class, plot.mpp$truth, positive=\"Depressed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n               Reference\nPrediction      Not Depressed Depressed\n  Not Depressed           195        35\n  Depressed                49        15\n                                         \n               Accuracy : 0.7143         \n                 95% CI : (0.659, 0.7652)\n    No Information Rate : 0.8299         \n    P-Value [Acc > NIR] : 1.0000         \n                                         \n                  Kappa : 0.0892         \n                                         \n Mcnemar's Test P-Value : 0.1561         \n                                         \n            Sensitivity : 0.30000        \n            Specificity : 0.79918        \n         Pos Pred Value : 0.23438        \n         Neg Pred Value : 0.84783        \n             Prevalence : 0.17007        \n         Detection Rate : 0.05102        \n   Detection Prevalence : 0.21769        \n      Balanced Accuracy : 0.54959        \n                                         \n       'Positive' Class : Depressed      \n                                         \n```\n\n\n:::\n:::\n\n\n\n\n\n* 195 people were correctly predicted to not be depressed (True Negative)\n* 49 people were incorrectly predicted to be depressed (False Positive)\n* 10 people were incorrectly predicted to not be depressed (False Negative)\n* 15 people were correctly predicted to be depressed (True Positive)\n\n## Vocabulary terms\nAlso other names for the same term, and formulas.\n\n* True positive ($n_{11}$)\n* True negative ($n_{22}$)\n* False positive, Type I error ($n_{12}$)\n* False negative, Type II error ($n_{21}$)\n* True positive rate (TPR), Recall, Sensitivity, probability of detection, power. P(predicted positive | total positive)\n$\\frac{\\# True Positive}{\\#Condition Positive}$\n\n* True negative rate (TNR), Specificity, selectivity. P(predicted negative | total negative)\n$\\frac{\\# True Negative}{\\# Condition Negative}$\n\n\n* False positive rate (FPR), fall-out, probability of false alarm. \n$\\frac{\\# False Positive}{\\# Condition Negative}$\n\n* False negative rate (FNR), miss rate. \n$\\frac{\\# False Negative}{\\# Condition Positive}$\n\n* Prevalence. \n$\\frac{\\# Condition Positive}{\\# Total Population}$\n\n* Accuracy. \n$\\frac{\\# True Positive + \\# True Negative}{\\# Total Population}$\n\n* Balanced Accuracy: $[(n_{11}/n_{.1}) + (n_{22}/n_{.2})]/2$ - Adjusts for class size imbalances\n\n* Positive Predictive Value (PPV), Precision. P(true positive | predicted positive)\n$\\frac{\\# True Positive}{\\# Predicted Condition Positive}$\n\n* False discovery rate (FDR). \n$\\frac{\\# False Positive}{\\# Predicted Condition Positive}$\n\n* False omission rate (FOR). \n$\\frac{\\# False Negative}{\\# Predicted Condition Negative}$\n\n* Negative predictive value (NPV). \n$\\frac{\\# True Negative}{\\# Predicted Condition Negative}$\n\n* F1 score. The harmonic mean of precision and recall. This ranges from 0 (bad) to 1 (good): $\\frac{2 * (Precision * Recall)}{Precision + Recall}$\n\n\n## ROC Curves\n\n* ROC curves show the balance between sensitivity and specificity.\n* We'll use the [[ROCR]](https://rocr.bioinf.mpi-sb.mpg.de/) package. It only takes 3 commands: \n    - calculate `prediction()` using the model\n    - calculate the model `performance()` on both true positive rate and true negative rate for a whole range of cutoff values. \n    - `plot` the curve. \n        - The `colorize` option colors the curve according to the probability cutoff point. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npr <- prediction(phat.depr, dep_sex_model$y)\nperf <- performance(pr, measure=\"tpr\", x.measure=\"fpr\")\nplot(perf, colorize=TRUE, lwd=3, print.cutoffs.at=c(seq(0,1,by=0.1)))\nabline(a=0, b=1, lty=2)\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWe can also use the `performance()` function to evaluate the $f1$ measure\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperf.f1 <- performance(pr,measure=\"f\")\nperf.acc <- performance(pr,measure=\"acc\")\n\npar(mfrow=c(1,2))\nplot(perf.f1)\nplot(perf.acc)\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWe can dig into the `perf.f1` object to get the maximum $f1$ value (`y.value`), then find the row where that value occurs, and link it to the corresponding cutoff value of x.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(max.f1 <- max(perf.f1@y.values[[1]], na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3937008\n```\n\n\n:::\n\n```{.r .cell-code}\n(row.with.max <- which(perf.f1@y.values[[1]]==max.f1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 68\n```\n\n\n:::\n\n```{.r .cell-code}\n(cutoff.value <- perf.f1@x.values[[1]][row.with.max])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      257 \n0.2282816 \n```\n\n\n:::\n:::\n\n\n\n\n\nA cutoff value of 0.228 provides the most optimal $f1$ score. \n\nROC curves: \n\n* Can also be used for model comparison: [Drawing ROC Curves in R with ROCR Package (Archive)](https://web.archive.org/web/20180124073014/http://yaojenkuo.io/diamondsROC.html)\n* The Area under the Curve (auc) also gives you a measure of overall model accuracy. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauc <- performance(pr, measure='auc')\nauc@y.values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.695041\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Model Performance\n\n* Say we decide that a value of 0.22828 is our optimal cutoff value to predict depression using this model. (note here is a GOOD place to use all the decimals.)\n* We can use this probability to classify each row into groups. \n    - The assigned class values must match the data type and levels of the true value.\n    - It also has to be in the same order, so the `0` group needs to come first. \n    - I want this matrix to show up like the one in Wikipedia, so I'm leveraging the `forcats` package to reverse my factor level ordering. \n* We can calculate a confusion matrix using the similarly named function from the `caret` package. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.mpp$pred.class2 <- ifelse(plot.mpp$pred.prob <0.22828, 0,1) \nplot.mpp$pred.class2 <- factor(plot.mpp$pred.class2, labels=c(\"Not Depressed\", \"Depressed\")) %>%   \n                        forcats::fct_rev()\n\nconfusionMatrix(plot.mpp$pred.class2, forcats::fct_rev(plot.mpp$truth), positive=\"Depressed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n               Reference\nPrediction      Depressed Not Depressed\n  Depressed            25            52\n  Not Depressed        25           192\n                                          \n               Accuracy : 0.7381          \n                 95% CI : (0.6839, 0.7874)\n    No Information Rate : 0.8299          \n    P-Value [Acc > NIR] : 0.999973        \n                                          \n                  Kappa : 0.2362          \n                                          \n Mcnemar's Test P-Value : 0.003047        \n                                          \n            Sensitivity : 0.50000         \n            Specificity : 0.78689         \n         Pos Pred Value : 0.32468         \n         Neg Pred Value : 0.88479         \n             Prevalence : 0.17007         \n         Detection Rate : 0.08503         \n   Detection Prevalence : 0.26190         \n      Balanced Accuracy : 0.64344         \n                                          \n       'Positive' Class : Depressed       \n                                          \n```\n\n\n:::\n:::\n\n\n\n\n\n* 192 people were correctly predicted to not be depressed (True Negative, $n_{11}$)\n* 52 people were incorrectly predicted to be depressed (False Positive, $n_{21}$)\n* 25 people were incorrectly predicted to not be depressed (False Negative, $n_{12}$)\n* 25 people were correctly predicted to be depressed (True Positive, $n_{22}$)\n\nOther terminology: \n\n* **Sensitivity/Recall/True positive rate**: P(predicted positive | total positive) = `25/(25+25) = .50`\n* **Specificity/true negative rate**: P(predicted negative | total negative) = `192/(52+192) = .7869`\n* **Precision/positive predicted value**: P(true positive | predicted positive) = `25/(25+52) = .3247`\n* **Accuracy**: (TP + TN)/ Total: `(25 + 192)/(25+52+25+192) = .7381`\n* **Balanced Accuracy**: $[(n_{11}/n_{.1}) + (n_{22}/n_{.2})]/2$ - This is to adjust for class size imbalances (like in this example)\n* **F1 score**: the harmonic mean of precision and recall. This ranges from 0 (bad) to 1 (good): $2*\\frac{precision*recall}{precision + recall}$ = `2*(.3247*.50)/(.3247+.50) = .3937`\n\n\n\n",
    "supporting": [
      "classification_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}