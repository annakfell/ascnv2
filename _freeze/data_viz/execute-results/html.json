{
  "hash": "06d550fc08abb574e6514e55f2517ed6",
  "result": {
    "engine": "knitr",
    "markdown": "# Visualizing Data {#sec-data-viz}\n\n:::{.callout-note}\n#### Packages Used\nThis chapter uses the following packages: `ggplot2`, `sjPlot`, `gtsummary`, `waffle`, `ggpubr`, \n`gridExtra`. \n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nVisualizing your data is hands down the most important thing you can learn to do. There are links to additional resources at the end of this document for additional learning. \n\n## Choosing your audience\n\n\nThe level of detail you put into your graphs/tables will depend on who\nthe graph/table is for. In general, you will be visualizing data for\nthree audience types: yourself and/or your data management team, an internal audience (other specialties within your organization, research coordinators), and external, professional audiences. The tabs below describe the three audience types and show an example graph for each.\n\n**Who is your audience?**\n\n::: panel-tabset\n### Yourself\n\nGraphs/tables for yourself and/or your working team can be \"quick and dirty.\"\nThese graphs are for getting a quick look at the data and are meant for\npeople who are already familiar with the data.\n\n\n\n\n::: {.cell fig-weight='3'}\n\n```{.r .cell-code}\nplot_frq(pen$island)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n### Internal Audience\n\nWhen presenting for an audience with some familiarity with the project and the data analysis process, your graphs don't have to be completely perfect, but they should be fairly polished and be understandable. A good rule of thumb for these graphs is if they\nwere to end up being published as-is without your knowledge, you\nwouldn't be completely embarrassed to see them in print.\n\n\n\n\n::: {.cell fig-weight='3'}\n\n```{.r .cell-code}\nplot_frq(pen$island, title = \"Count of Penguins by Island\") +\n        xlab(\"Island\") +\n        theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n### Professional\n\nProfessional quality graphs and tables have the highest amount of detail\nand take the most amount of time to make. They should be able to be\ninterpreted by people not familiar with the project or data analysis, even\nwithout reading the rest of the report.\n\n\n\n\n::: {.cell fig-weight='3'}\n\n```{.r .cell-code}\nplot_frq(pen$island, title = \"Count of Penguins by Island\") +\n          labs(subtitle = \"Includes penguins of Adelie, Gentoo, and Chinstrap species\") +\n          xlab(\"Island\") +\n          ylab(\"Penguin Count\") + \n          theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n\n## The Data\n\n> switch to introduce the penguins dataset MAYBE use ### third level headers. \n\nWe will use the `penguins` dataset that comes with the `palmerpenguins` package. This dataset contains size measurements for three penguin species observed on three islands in the Palmer Archipelago, Antarctica. Review `?penguins` to learn about the variables we will be using. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen <- palmerpenguins::penguins\n```\n:::\n\n\n\n\n> [RAD] write a paragraph here about how this section is organized. \n\n## One Categorical Variable\n\nBoth Nominal and Ordinal data types can be visualized using the same methods: tables, barcharts and pie charts. \n\n\n### Tables\n\nFrequency and proporation (relative frequency) tables are the most common way to get summary statistics of a categorical variable.\n\n::: {.panel-tabset}\n\n## base\n\nThe `table()` function produces a frequency table, where each entry represents the number of records in the data set holding the corresponding labeled value. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pen$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   Adelie Chinstrap    Gentoo \n      152        68       124 \n```\n\n\n:::\n:::\n\n\n\nThere are 152 Adelie penguins, 68 Chinstrap penguins, and 124 Gentoo penguins in this dataset. \n\n\n## gtsummary\n\n> Robin add text here. \n\nbrief explanation of how it works. Defaults to creating a summary table of the entire data set, so you have to pre-select out only the variables you want to get a summary of. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npen |> select(species) |> tbl_summary()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"xwfjgsixkp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#xwfjgsixkp table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#xwfjgsixkp thead, #xwfjgsixkp tbody, #xwfjgsixkp tfoot, #xwfjgsixkp tr, #xwfjgsixkp td, #xwfjgsixkp th {\n  border-style: none;\n}\n\n#xwfjgsixkp p {\n  margin: 0;\n  padding: 0;\n}\n\n#xwfjgsixkp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#xwfjgsixkp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#xwfjgsixkp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#xwfjgsixkp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#xwfjgsixkp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#xwfjgsixkp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#xwfjgsixkp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#xwfjgsixkp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#xwfjgsixkp .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#xwfjgsixkp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#xwfjgsixkp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#xwfjgsixkp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#xwfjgsixkp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#xwfjgsixkp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#xwfjgsixkp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xwfjgsixkp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#xwfjgsixkp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#xwfjgsixkp .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#xwfjgsixkp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xwfjgsixkp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#xwfjgsixkp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xwfjgsixkp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#xwfjgsixkp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xwfjgsixkp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#xwfjgsixkp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xwfjgsixkp .gt_left {\n  text-align: left;\n}\n\n#xwfjgsixkp .gt_center {\n  text-align: center;\n}\n\n#xwfjgsixkp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#xwfjgsixkp .gt_font_normal {\n  font-weight: normal;\n}\n\n#xwfjgsixkp .gt_font_bold {\n  font-weight: bold;\n}\n\n#xwfjgsixkp .gt_font_italic {\n  font-style: italic;\n}\n\n#xwfjgsixkp .gt_super {\n  font-size: 65%;\n}\n\n#xwfjgsixkp .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#xwfjgsixkp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#xwfjgsixkp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#xwfjgsixkp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#xwfjgsixkp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#xwfjgsixkp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#xwfjgsixkp .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Characteristic&lt;/strong&gt;\"><strong>Characteristic</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;N = 344&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>N = 344</strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">species</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Adelie</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">152 (44%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Chinstrap</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">68 (20%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Gentoo</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">124 (36%)</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"2\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span> n (%)</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n\n```{.r .cell-code}\npen |> select(species, island) |> tbl_summary()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"yzcudpfsct\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#yzcudpfsct table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#yzcudpfsct thead, #yzcudpfsct tbody, #yzcudpfsct tfoot, #yzcudpfsct tr, #yzcudpfsct td, #yzcudpfsct th {\n  border-style: none;\n}\n\n#yzcudpfsct p {\n  margin: 0;\n  padding: 0;\n}\n\n#yzcudpfsct .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#yzcudpfsct .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#yzcudpfsct .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#yzcudpfsct .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#yzcudpfsct .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#yzcudpfsct .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#yzcudpfsct .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#yzcudpfsct .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#yzcudpfsct .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#yzcudpfsct .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#yzcudpfsct .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#yzcudpfsct .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#yzcudpfsct .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#yzcudpfsct .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#yzcudpfsct .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzcudpfsct .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#yzcudpfsct .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#yzcudpfsct .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#yzcudpfsct .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzcudpfsct .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#yzcudpfsct .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzcudpfsct .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#yzcudpfsct .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzcudpfsct .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yzcudpfsct .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yzcudpfsct .gt_left {\n  text-align: left;\n}\n\n#yzcudpfsct .gt_center {\n  text-align: center;\n}\n\n#yzcudpfsct .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#yzcudpfsct .gt_font_normal {\n  font-weight: normal;\n}\n\n#yzcudpfsct .gt_font_bold {\n  font-weight: bold;\n}\n\n#yzcudpfsct .gt_font_italic {\n  font-style: italic;\n}\n\n#yzcudpfsct .gt_super {\n  font-size: 65%;\n}\n\n#yzcudpfsct .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#yzcudpfsct .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#yzcudpfsct .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#yzcudpfsct .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#yzcudpfsct .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#yzcudpfsct .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#yzcudpfsct .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Characteristic&lt;/strong&gt;\"><strong>Characteristic</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;N = 344&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>N = 344</strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">species</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Adelie</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">152 (44%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Chinstrap</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">68 (20%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Gentoo</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">124 (36%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">island</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Biscoe</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">168 (49%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Dream</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">124 (36%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Torgersen</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">52 (15%)</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"2\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span> n (%)</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\nThis can be advantageous if you want to have a single table showing the frequency distribution of multiple variables. \n:::\n\n### Frequency Barcharts / Barplots\n\n::: {.callout-warning appearance=simple}\n\n> adjust explanatory text here\n\n:::  \n\nA Barchart or barplot takes these frequencies, and draws bars along the X-axis where the height of the bars is determined by the frequencies seen in the table. \n\n::: {.panel-tabset}\n\n## base\n\nTo create a barplot/barchart in base graphics requires the data to be in summarized in a table form first. Then the result of the table is plotted. The first argument is the table to be plotted, the `main` argument controls the title. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nps <- table(pen$species)\nbarplot(ps, main=\"Barchart using base graphics\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-warning appearance=simple}\n\n> note yaxis direction and no labels at top of bar\n\n:::  \n\n\n## ggplot\nThe geometry needed to draw a barchart in ggplot is `geom_bar()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=species)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n### Learn more\nFor more practice with `ggplot` syntax, reference [Math 130 Lesson 07](https://norcalbiostat.github.io/MATH130/notes/07_plots.html#The_syntax_of_ggplot), or the [R Graphics Cookbook appendix](https://r-graphics.org/chapter-ggplot2).\n\n:::\n\n**Adding Annotation**\n\nThe biggest addition to increase the readability of a barchart is to add the frequencies on top of the bars. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=species)) + theme_bw() + \n    geom_bar(aes(y = ..count..)) + ggtitle(\"Frequency of penguins by species\") + \n    geom_text(aes(y=..count.. + 10, label=..count..), stat='count', size = 5)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## sjPlot\n::: {.callout-warning appearance=simple}\n\n> explain why this is the current best option\n\n:::  \n\nuse sjplot example here. \n\n## Plotting proportions\n\nOften you don't want to compare counts but percents. To accomplish this, we have to aggregate the data to calculate the proportions first, then plot the aggregated data using `geom_col` to create the columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec.props <- data.frame(prop.table(table(pen$species)))\nspec.props # what does this data look like? \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Var1      Freq\n1    Adelie 0.4418605\n2 Chinstrap 0.1976744\n3    Gentoo 0.3604651\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(spec.props, aes(x=Var1, y=Freq)) + geom_col() + \n  ylab(\"Proportion\") + xlab(\"Species\") + \n  ggtitle(\"Proportion of penguins by species\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### Proportion Barcharts\n\n* move the example above here b/c ggplot example\n* create a 'base' tab, but with only space for robin to write\n* third tab is sjplot plot_frq (add this to the above section also)\n\n### Other\n\n> RAD add some intro text here. \n\n::: {.panel-tabset}\n#### Cleveland Dot Plots\n\nAnother way to visualize categorical data that takes up less ink than bars is a Cleveland dot plot. Here again we are plotting summary data instead of the raw data. This uses the `geom_segment` that draws the lines from x=0 to the value of the proportion (named `Freq` because of the way `data.frame` works).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(spec.props, aes(x=Freq, y=Var1)) +  \n  geom_point(size = 3) + xlab(\"Proportion of penguins\") + \n  theme_bw() + ylab(\"Species\") +\n  geom_segment(aes(x=0, xend=Freq, y=Var1, yend=Var1), color='grey50')\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Pie Chart\n\nJust like `barplot()`, `pie()` takes a table object as it's argument. \n\n**base**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nps <- table(pen$species)\npie(ps)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nPie charts are my _least_ favorite plotting type. Human eyeballs can't distinguish between angles as well as we can with heights. A mandatory piece needed to make the wedges readable is to add the percentages of each wedge. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npie(ps, labels = paste0(names(ps), ' (', prop.table(ps)*100, \"%)\"))\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n**ggplot**\n\nAnd here I thought pie charts couldn't get worse... I'm not a fan at all of the ggplot version. So i'm not even going to show it. [Here's](http://www.sthda.com/english/wiki/ggplot2-pie-chart-quick-start-guide-r-software-and-data-visualization) a link to another great tutorial that does show you how to make one. \n\nHowever -- Never say never. [Here's](http://www.storytellingwithdata.com/blog/2019/8/8/forty-five-pie-charts-never-say-never) an example of a *good* use of pie charts. \n\n\n#### Waffle Chart \nThis type of chart is not natively found in the `ggplot2` package, but it's own `waffle` package. These are great for infographics. \n\nReference: [Making waffle charts in R - R bloggers](https://www.r-bloggers.com/making-waffle-charts-in-r-with-the-new-waffle-package/)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(waffle)\n\nwaffle(ps/10, rows=5, size=0.5, \n       title=\"Species of penguins\", \n       xlab=\"1 square == 10 penguins\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n## One Continuous Variable\nHere we can look at the bill length and depth, flipper length, and body mass of the penguins. \n\n### Dotplot\n> RAD change this to an introduction/motivating example instead of describing a plot type. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pen$bill_length_mm)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nThe base function `plot()` creates a **dotplot** for a continuous variable. The value of the variable is plotted on the y axis, and the index, or row number, is plotted on the x axis. This gives you a nice, quick way to see the values of the data. \n\nOften you are not interested in the individual values of each data point, but the _distribution_ of the data. In other words, where is the majority of the data? Does it look symmetric around some central point? Around what values do the bulk of the data lie? \n\n\n### Histograms\nRather than showing the value of each observation, we prefer to think of the value as belonging to a \\emph{bin}. **The height of the bars in a histogram display the frequency of values that fall into those of those bins.** For example if we cut the bill length distribution into 7 bins of equal width, the frequency table would look like this: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(cut(pen$bill_length_mm, 7))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  (32.1,36]     (36,40]   (40,43.9] (43.9,47.8] (47.8,51.7] (51.7,55.7] \n         26          74          67          81          75          15 \n(55.7,59.6] \n          4 \n```\n\n\n:::\n:::\n\n\n\n\nIn a histogram, the binned counts are plotted as bars into a histogram. Note that the x-axis is continuous, so the bars touch. This is unlike the barchart that has a categorical x-axis, and vertical bars that are separated.\n\n::: {.panel-tabset}\n\n## base\nYou can make a histogram in base graphics super easy. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(pen$bill_length_mm)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nAnd it doesn't take too much to clean it up. Here you can specify the number of bins by specifying how many `breaks` should be made in the data (the number of breaks controls the number of bins, and bin width) and use `col` for the fill color. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(pen$bill_length_mm, xlab=\"Bill length in mm\", main=\"Histogram of penguin bill lengths\", col=\"cyan\", breaks=20)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm)) + geom_histogram(binwidth = 2.2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nThe binwidth here is set by looking at the cut points above that were used to create 7 bins. Notice that darkgrey is the default fill color, but makes it hard to differentiate between the bars. So we'll make the outline black using `colour`, and `fill` the bars with white. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm)) + geom_histogram(colour=\"black\", fill=\"white\") + \n  ggtitle(\"Distribution of penguin bill lengths\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\nNote I did **not** specify the `binwidth` argument here. The size of the bins can hide features from your graph, the default value for ggplot2 is range/30 and usually is a good choice. \n\n## ggpubr\n\n> RAD add example here. \n\n:::\n\n### Density plots\nTo get a better idea of the true shape of the distribution we can \"smooth\" out the bins and create what's called a `density` plot or curve. Notice that the shape of this distribution curve is much more... \"wigglier\" than the histogram may have implied. \n\n::: {.panel-tabset}\n\n## base\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(density(na.omit(pen$bill_length_mm))) \npen$bill_length_mm |> na.omit() |> density() |> plot()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\nAwesome title huh? (NOT)\n\n::: {.callout-warning appearance=simple}\n\n> discuss why na.omit and nesting vs pipe example\n\n:::  \n\n\n## ggplot2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Histograms + density \nOften is is more helpful to have the density (or kernel density) plot _on top of_ a histogram plot. \n\n::: {.panel-tabset}\n\n## base\nSince the height of the bars in a histogram default to showing the frequency of records in the data set within that bin, we need to 1) scale the height so that it's a _relative frequency_, and then use the `lines()` function to add a `density()` line on top. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(pen$bill_length_mm, prob=TRUE)\nlines(density(na.omit(pen$bill_length_mm)), col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nThe syntax starts the same, we'll add a new geom, `geom_density` and color the line blue. Then we add the histogram geom using `geom_histogram` but must specify that the y axis should be on the density, not frequency, scale. Note that this has to go inside the aesthetic statement `aes()`. I'm also going to get rid of the fill by using `NA` so it doesn't plot over the density line. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm)) + geom_density(col=\"blue\") + \n  geom_histogram(aes(y=..density..), colour=\"black\", fill=NA)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Boxplots\nAnother very common way to visualize the distribution of a continuous variable is using a boxplot. Boxplots are useful for quickly identifying where the bulk of your data lie. R specifically draws a \"modified\" boxplot where values that are considered outliers are plotted as dots. \n\n::: {.panel-tabset}\n\n## base\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(pen$bill_length_mm)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\nNotice that the only axis labeled is the y=axis. Like a dotplot the x axis, or \"width\", of the boxplot is meaningless here. We can make the axis more readable by flipping the plot on it's side. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(pen$bill_length_mm, horizontal = TRUE, main=\"Distribution of penguin bill lengths\", xlab=\"Bill length in mm\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\nHorizontal is a bit easier to read in my opinion. \n\n## ggplot\nWhat about ggplot? ggplot doesn't really like to do univariate boxplots. We can get around that by specifying that we want the box placed at a specific x value. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=1, y=bill_length_mm)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\nTo flip it horizontal you may think to simply swap x and y? Good thinking. Of course it wouldn't be that easy. So let's just flip the whole darned plot on it's coordinate axis. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=1, y=bill_length_mm)) + geom_boxplot() + coord_flip()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Violin plots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=1, y=bill_length_mm)) + geom_violin()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Boxplot + Violin plots\nOverlaying a boxplot and a violin plot serves a similar purpose to Histograms + Density plots. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=1, y=bill_length_mm)) + geom_violin() + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\nBetter appearance - different levels of transparency of the box and violin. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=1, y=bill_length_mm)) + xlab(\"\") + theme_bw() + \n              geom_violin(fill=\"blue\", alpha=.1) + \n              geom_boxplot(fill=\"blue\", alpha=.5, width=.2) + \n              theme(axis.title.x=element_blank(),\n              axis.text.x=element_blank(),\n              axis.ticks.x=element_blank())\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n### Normal QQ plots\nThe last useful plot that we will do on a single continuous variable is to assess the _normality_ of the distribution. Basically how close the data follows a normal distribution. \n\n::: {.panel-tabset}\n\n## base\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqqnorm(pen$body_mass_g)\nqqline(pen$body_mass_g, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\nThe line I make red because it is a reference line. The closer the points are to following this line, the more \"normal\" the shape of the distribution is. Price has some pretty strong deviation away from that line. Below I have plotted what a normal distribution looks like as an example of a \"perfect\" fit. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- rnorm(1000)\nqqnorm(z)\nqqline(z, col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nqq (or qnorm) plots specifically plot the data against a theoretical distribution. That means in the `aes()` aesthetic argument we don't specify either x or y, but instead the `sample=` is the variable we want to plot. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(sample=body_mass_g)) + stat_qq()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\nAdditional references on making qqplots in ggplot: [ggplot2 qq plot (quantile - quantile graph) : Quick start guide - STHDA](http://www.sthda.com/english/wiki/ggplot2-qq-plot-quantile-quantile-graph-quick-start-guide-r-software-and-data-visualization)\n\n:::\n\n## Bivariate Visualizations\n\n### Categorical v. Categorical\n\n#### Two-way tables\n\n> intro to two way frequency and proportion tables\n\n::: {.panel-tabset}\n\n## frequency\nCross-tabs, cross-tabulations and two-way tables (all the same thing, different names) can be created by using the `table()` function. \n\nThe frequency table is constructed using the `table()` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pen$island, pen$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            Adelie Chinstrap Gentoo\n  Biscoe        44         0    124\n  Dream         56        68      0\n  Torgersen     52         0      0\n```\n\n\n:::\n:::\n\n\n\n\nThere are 44 Adelie penguins and 124 Gentoo penguins on Biscoe Island, 56 Adelie and 68 Chinstrap penguins on Dream Island, and 52 Adelie penguins on Torgersen Island.\n\n## proportion\nChoose your percentages depending on your research question. What are you wanting to compare? \n\nBest practices: \n\n* Explanatory variable on the rows\n* Response variable on the columns\n* Calculate row %'s as the % of the response for each explanatory group. \n\nHere are demonstrations of how the interpretation of the percents change depending on what the denominator is. \n\n**Cell proportions**\n\nWrapping `prop.table()` around a table gives you the **cell** proportions. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(pen$island, pen$species))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n               Adelie Chinstrap    Gentoo\n  Biscoe    0.1279070 0.0000000 0.3604651\n  Dream     0.1627907 0.1976744 0.0000000\n  Torgersen 0.1511628 0.0000000 0.0000000\n```\n\n\n:::\n:::\n\n\n\n12.8% of all penguins are Adelie penguins living on Biscoe Island, and 36% are Gentoo penguins living on Biscoe Island, so about 39% of all penguins in our data are living on Biscoe Island. \n\n**Row proportions**\n\nTo get the **row** proportions, you specify `margin=1`. The percentages now add up to 1 across the rows. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(prop.table(table(pen$island, pen$species), margin=1),3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            Adelie Chinstrap Gentoo\n  Biscoe     0.262     0.000  0.738\n  Dream      0.452     0.548  0.000\n  Torgersen  1.000     0.000  0.000\n```\n\n\n:::\n:::\n\n\n\n\n26.2% of penguins on Biscoe Island are from the Adelie species. The remaining 73.8% on the island are Gentoo penguins.\n\n**Column proportions**\n\nTo get the **column** proportions, you specify `margin=2`. The percentages now add up to 1 down the columns. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(prop.table(table(pen$island, pen$species), margin=2),3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            Adelie Chinstrap Gentoo\n  Biscoe     0.289     0.000  1.000\n  Dream      0.368     1.000  0.000\n  Torgersen  0.342     0.000  0.000\n```\n\n\n:::\n:::\n\n\n\n\n0.289% of all Adelie penguins are on Biscoe Island. Chinstrap and Gentoo species are endemic to a single island, so 100% of their populations are on Dream and Torgersen Island, respectively.\n\n:::\n\n#### Grouped bar charts\nTo compare proportions of one categorical variable within the same level of another, is to use grouped barcharts. \n\n::: {.panel-tabset}\n\n## base\nAs before, the object to be plotted needs to be the result of a table. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis <- table(pen$island, pen$species)\nbarplot(is)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\nStacked bars can be difficult to interpret, and very difficult to compare values between groups. A side by side barchart is preferable. \nThe `beside=TRUE` is what controls the placement of the bars. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(is, main=\"quick side by side barchart using base graphics\", beside=TRUE)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nAgain plot the cut on the x axis, but then `fill` using the second categorical variable. This has the effect of visualizing the **row** percents from the table above, or the percent of species on each island. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=island, fill=species)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\nAgain the default is a stacked barchart. So we just specify `position=dodge` to put the bars side by side. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=island, fill=species)) + geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n\nAnd look, an automatic legend. What if I wanted to better compare island population proportions within species? This is the **column** percentages. Just switch which variable is the x axis and which one is used to fill the colors!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=species, fill=island)) + geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n\nFor more than 2 colors I do not recommend choosing the colors yourself. I know little about color theory so I use the built-in color palettes. Here is a [great cheatsheet](https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf) about using color palettes. \n\nAnd this easy change is why we love `ggplot2`. \n\n:::\n\n#### Grouped bar charts with percentages\nNot as easy as one would hope, but the solution is to calculate the desired percentages first and then plot the summary data using either `geom_bar(stat='identity')` or `geom_col()`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ncalc.props <- pen %>% group_by(island, species) %>%\n              summarise(count=n()) %>%\n              mutate(pct=round(count/sum(count),3))\ncalc.props\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n# Groups:   island [3]\n  island    species   count   pct\n  <fct>     <fct>     <int> <dbl>\n1 Biscoe    Adelie       44 0.262\n2 Biscoe    Gentoo      124 0.738\n3 Dream     Adelie       56 0.452\n4 Dream     Chinstrap    68 0.548\n5 Torgersen Adelie       52 1    \n```\n\n\n:::\n:::\n\n\n\n\nSince we're plotting summary data, the height of the bars is specified using `y=pct`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(calc.props, aes(x=island, fill=species, y=pct)) +\n                  geom_col(position=\"dodge\") + theme_bw() \n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n\nNow set some options to the y axis using `scale_y_continuous()` to make the graph more accurate and readable. The `labels=percent` comes from the `scales` package. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\nggplot(calc.props, aes(x=island, fill=species, y=pct)) +\n                  geom_col(position=\"dodge\") + theme_bw() +\n                  scale_y_continuous(limits=c(0,1), labels=percent)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n::: {.panel-tabset}\n\n#### sjPlot\n\nsjPlot does a very nice job of being able to cleanly show not only n's but percents. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sjPlot)\nplot_xtab(pen$island, pen$species, margin=\"row\", coord.flip = TRUE) \n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### Mosaic plots\nBut what if you want to know how two categorical variables are related and you don't want to look at two different barplots? Mosaic plots are a way to visualize the proportions in a table. So here's the two-way table we'll be plotting. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pen$island, pen$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            Adelie Chinstrap Gentoo\n  Biscoe        44         0    124\n  Dream         56        68      0\n  Torgersen     52         0      0\n```\n\n\n:::\n:::\n\n\n\n\nThe syntax for a mosaic plot uses _model notation_, which is basically y ~ x where the ~ is read as \"twiddle\" or \"tilde\". It's to the left of your **1** key.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmosaicplot(island~species, data=pen)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n\n> Increase fig length or use dif example variable\n\nHelpful, ish. Here are two very useful options. In reverse obviousness, `color` applies shades of gray to one of the factor levels, and `shade` applies a color gradient scale to the cells in order of what is less than expected (red) to what is more than expected (blue) if these two factors were completely independent. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2)) # display the plots in 1 row and 2 columns\nmosaicplot(island~species, data=pen, color=TRUE)\nmosaicplot(island~species, data=pen, shade=TRUE)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-51-1.png){width=960}\n:::\n:::\n\n\n\n\nFor example, there are fewer 'Very Good' cut diamonds that are color 'G', and fewer 'Premium' cut diamonds that are color 'H'. As you can see, knowing what your data means when trying to interpret what the plots are telling you is essential. \n\nThat's about all the ways you can plot categorical variables. \nIf you are wondering why there was no 3D barcharts demonstrated see  \n[here](http://faculty.atu.edu/mfinan/2043/section31.pdf),\n[here](https://www.bbc.co.uk/bitesize/articles/z7cx7yc), and \n[here](https://en.wikipedia.org/wiki/Misleading_graph) for other ways you can really screw up your visualization.\n\n:::\n\n### Continuous v. Continuous \n\n#### Scatterplot\nThe most common method of visualizing the relationship between two continuous variables is by using a scatterplot. \n\n::: {.panel-tabset}\n\n## base\nBack to the `plot()` command. Here we use model notation again, so it's $y~x$. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(flipper_length_mm~body_mass_g, data=pen)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n\n\nLooks like for the most part as penguin body mass increases so does flipper length. That makes sense. \n\n## ggplot\nWith ggplot we specify both the x and y variables, and add a point. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=body_mass_g, y=flipper_length_mm)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n**Other Resources**\n\n* [Scatterplot in R tutorial - Datacamp](http://www.statmethods.net/graphs/scatterplot.html)  \n* [Scatterplot matrices - R bloggers](https://www.r-bloggers.com/scatterplot-matrices/)\n\n\n#### Adding lines to the scatterplots \n\nTwo most common trend lines added to a scatterplots are the \"best fit\" straight line and the \"lowess\" smoother line. \n\n::: {.panel-tabset}\n\n## base\nThe best fit line (in blue) gets added by using the `abline()` function wrapped around the linear model function `lm()`. Note it uses the same model notation syntax and the `data=` statement as the `plot()` function does. The lowess line is added using the `lines()` function, but the `lowess()` function itself doesn't allow for the `data=` statement so we have to use `$` sign notation. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(flipper_length_mm~body_mass_g, data=pen)\nabline(lm(flipper_length_mm~body_mass_g, data=pen), col=\"blue\")\nlines(lowess(na.omit(pen$flipper_length_mm)~na.omit(pen$body_mass_g)),\n      col=\"red\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nWith ggplot, we just add a `geom_smooth()` layer. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=body_mass_g, y=flipper_length_mm)) + geom_point() + geom_smooth() \n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n\n\nHere the point-wise confidence interval for this lowess line is shown in grey. If you want to turn the confidence interval off, use `se=FALSE`. Also notice that the smoothing geom uses a different function or window than the `lowess` function used in base graphics. \n\nHere it is again using the `ggplot` plotting function and adding another `geom_smooth()` layer for the `lm` (linear model) line in blue, and the lowess line (by not specifying a method) in red.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=body_mass_g, y=flipper_length_mm)) + geom_point() + \n  geom_smooth(se=FALSE, method=\"lm\", color=\"blue\") + \n  geom_smooth(se=FALSE, color=\"red\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n#### Line plots\n\nLine plots connect each dot with a straight line. This is most often done when measuring trends of the response as the value of x increases (such as a time series)\n\nWe saw earlier that `body_mass_g` and `flipper_length_mm` seemed possibly linear. Let see how the average flipper length changes with body mass. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmm.per.g <- pen %>% group_by(body_mass_g) %>% summarise(mean = mean(flipper_length_mm))\n```\n:::\n\n\n\n\n::: {.panel-tabset}\n\n## base\nFor base graphics, type='b' means both points and lines, 'l' gives you just lines and 'p' gives you only points. You can find more plotting character options under `?pch`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mean~body_mass_g, data=mm.per.g, type='l')\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nWith ggplot we specify that we want a line geometry only. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mm.per.g, aes(x=body_mass_g, y=mean)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\nHow does this relationship change with penguin species? First lets \nget the average flipper length per combination of body mass and species \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmpgs <- pen %>% group_by(body_mass_g, species) %>% summarise(mean = mean(flipper_length_mm))\n```\n:::\n\n\n\n\n::: {.panel-tabset}\n\n## ggplot\nThis is where ggplot starts to excel in it's ease of creating more\ncomplex plots. All we have to do is specify that we want the lines \ncolored by the cut variable. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mmpgs, aes(x=body_mass_g, y=mean, col=species)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n\n\nAnd we get one line per cut. \n\n## base\nThis plot can be created in base graphics, but it takes an advanced \nknowledge of the graphics system to do so. So I do not show it here. \n\n:::\n\n### Continuous v. Categorical\nCreate an appropriate plot for a continuous variable, and plot it for each\nlevel of the categorical variable. \n\n\n\n#### Dotplot/strip chart\n\nDotplots can be very useful when plotting dots against several categories. They can also be called stripcharts. \n\n::: {.panel-tabset}\n\n## base\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstripchart(body_mass_g ~ species, data=pen)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nWe can reproduce the same thing by plotting one continuous variable against one categorical variable, and adding a layer of points. I'd argue that horizontal looks better due to the axis-labels. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra)\na <- ggplot(pen, aes(y=body_mass_g, x=species)) + geom_point()\nb <- ggplot(pen, aes(y=species, x=body_mass_g)) + geom_point()\ngrid.arrange(a, b, ncol=2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n\n#### Grouped boxplots\n\n::: {.panel-tabset}\n\n## base\n\nBase graphics plots grouped boxplots with also just the addition of a twiddle (tilde) `~`. \nAnother example of where model notation works. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(bill_length_mm~species, data=pen)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n\n\n## ggplot\nA simple addition, just define your x and y accordingly. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=species, y=bill_depth_mm, fill=species)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n\n\n## Adding violins\n\nViolin plots can be overlaid here as well. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=species, y=bill_depth_mm, fill=species)) +\n        geom_violin(alpha=.1) + \n        geom_boxplot(alpha=.5, width=.2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n#### Grouped histograms\n\n::: {.panel-tabset}\n\n## ggplot\nBy default ggplot wants to overlay all plots on the same grid. This doesn't look to good with histograms. Instead you can overlay density plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_histogram()\nb <- ggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_density() \ngrid.arrange(a,b, ncol=2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-67-1.png){width=960}\n:::\n:::\n\n\n\n\nThe solid fills are still difficult to read, so we can either turn down the alpha (turn up the transparency) or only color the lines and not the fill. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- ggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_density(alpha=.2)\nd <- ggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_density() \ngrid.arrange(c,d, ncol=2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-68-1.png){width=960}\n:::\n:::\n\n\n\n\n## base\nThere is no easy way to create grouped histograms in base graphics we will skip it. \n\n:::\n\n#### Joy plots / Ridgelines \nSomewhat new (2017), joylines have not been added to the base distribution of `ggplot2` yet. For now it's available in the `ggjoy` package. Really good way to visualize density plots without the overlapping issue. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggjoy)\nggplot(pen, aes(x=bill_depth_mm, y=species)) + geom_joy()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-69-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Faceting / paneling \n\nThis is a good place to introduce a term called `faceting`. The definition is _a particular aspect or feature of something_, or _one side of something many-sided, especially of a cut gem_. Basically instead of plotting the grouped graphics on the same plotting area, we let each group have it's own plot, or facet.  \n\nWe add a `facet_wrap()` and specify that we want to panel on the species group. Note the twiddle in front of species \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_density() + facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n\n\nThe grid placement can be semi-controlled by using the `ncol` argument in the `facet_wrap()` statement. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_depth_mm, fill=species)) + \n  geom_density() + facet_wrap(~species, ncol=4)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n\n\nIt is important to compare distributions across groups on the same scale, and our eyes can compare items vertically better than horizontally. So let's force `ncol=1`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_depth_mm, fill=species)) + \n  geom_density() + facet_wrap(~species, ncol=1)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Multiple plots per window\n\n::: {.panel-tabset}\n\n## base\nI use `par(mfrow=c(r,c))` for base graphics, where `r` is the number of rows and `c` the number of columns. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,3))\nplot(pen$bill_depth_mm)\nplot(pen$species)\nplot(pen$bill_length_mm ~ pen$bill_depth_mm)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n\n\nOther resources including learning about `layouts`. [Multipanel plotting with base graphics](http://seananderson.ca/courses/11-multipanel/multipanel.pdf) \n\n## ggplot\nUse the `grid.arrange` function in the `gridExtra` package. I've done it several times above. You assign the output of a ggplot object to an object (here it's `plot1` and `plot2`). Then you use `grid.arrange()` to arrange them either side by side or top and bottom. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_density(alpha=.2)\nb <- ggplot(pen, aes(x=bill_depth_mm, fill=species)) + geom_density() \ngrid.arrange(a,b, ncol=2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n\n\n## quarto\n\n> example or reference to https://quarto.org/docs/get-started/computations/rstudio.html#multiple-figures \n\n:::\n\n## Multivariate (3+ variables)\nThis is not much more complicated than taking an appropriate bivariate plot and adding a third variable through paneling, coloring, or changing a shape. \n\nThis is trivial to do in ggplot, not trivial in base graphics. So I won't show those examples. \n\n### Three continuous\nContinuous variables can also be mapped to the size of the point. Here I set the alpha on the points so we could see the overplotting (many points on a single spot). So the darker the spot the more data points on that spot. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm, y=bill_depth_mm, size=body_mass_g)) + geom_point(alpha=.2)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Scatterplot matrix\nA scatterplot matrix allows you to look at the bivariate comparison of multiple pairs of variables simultaneously. First we need to trim down the data set to only include the variables we want to plot, then we use the `pairs()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc.vars <- pen[,c('flipper_length_mm', 'bill_length_mm', 'bill_depth_mm', 'body_mass_g')]\npairs(c.vars)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n\n> Original comment- We can see price has a non-linear relationship with X, Y and Z and x & y have a near perfect linear relationship. \n\n\n### Two categorical and one continuous\nThis is very similar to side by side boxplots, one violin plot per `sex`, within each island \n> Original comment - This is difficult to really see due to the large number of categories each factor has. The categorical variables in the penguins dataset have less categories w less combinations \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=island, y=bill_length_mm, fill=species)) + geom_violin()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n\n\nBest bet here would be to panel on species and change the x axis to location.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=species, y=bill_length_mm, fill=species)) + geom_violin() + facet_wrap(~island)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n### Two continuous and one categorical \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ggplot(pen, aes(x=bill_length_mm, y=bill_depth_mm, color=species)) + geom_point() + ggtitle(\"Colored by species\")\nd <- ggplot(pen, aes(x=bill_length_mm, y=bill_depth_mm, color=species)) + geom_point() + \n      geom_smooth(se=FALSE) +ggtitle(\"Lowess line per species\")\ngrid.arrange(a, d, nrow=1)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n\n\n\nChange the shape\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm, y=bill_depth_mm, shape=species)) + geom_point() + ggtitle(\"Shape by species\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n\n\nOr we just panel by the third variable\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=bill_length_mm, y=bill_depth_mm)) + geom_point() + facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n\n\n\n## Paneling on two variables\n> move this up as a subsection of the faceting/paneling section \n\n\nWho says we're stuck with only faceting on one variable? A variant on `facet_wrap` is `facet_grid`. Here we can specify multiple variables to panel on. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=body_mass_g, fill=sex)) + geom_density() + facet_grid(sex~island)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-82-1.png){width=960}\n:::\n:::\n\n\n\n\nHow about plotting bill length against flipper length, for all combinations of species and island, with the points further separated by sex?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=flipper_length_mm, y=bill_length_mm, color=sex)) + geom_point() + facet_grid(island~species)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n\n\n\n\nAnd lastly let's look back at how we can play with scatterplots of using a third categorical variable (using `ggplot2` only). We can color the points by species, \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=flipper_length_mm, y=bill_length_mm, color=species)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n\n\n\nWe could add a smoothing lowess line for each species separately, \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=flipper_length_mm, y=bill_length_mm, color=species)) + geom_point() + geom_smooth(se=FALSE)\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n\n\n\nWe could change the color by sex, and shape by species. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pen, aes(x=flipper_length_mm, y=bill_length_mm, color=sex, shape=species)) + geom_point() \n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n\n\n\nThat's harder to read. So note that just because you **can** change an aesthetic, doesn't mean you should. And just because you can plot things on the same axis, doesn't mean you have to. \n\nBefore you share your plot with any other eyes, always take a step back and try to explain what it is telling you. If you have to take more than a minute to get to the point then it may be too complex and simpler graphics are likely warranted. \n\n\n-----\n\n## Troubleshooting \n\n### Problem: Missing data showing up as a category in ggplot? \n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nGet rid of that far right bar!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(NCbirths, aes(x=marital)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-tip appearance=minimal collapse=true}\n\n## Solution:\nUse `dplyr` to select only the variables you are going to plot, then pipe in the `na.omit()` at the end. It will create a temporary data frame (e.g) `plot.data` that you then provide to `ggplot()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.data <- NCbirths %>% select(marital) %>% na.omit()\nggplot(plot.data, aes(x=marital)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Problem: Got numerical binary 0/1 data but want to plot it as categorical? \n\n> Other related error messages: Continuous x aesthetic -- did you forget aes(group=...)?  \n\nConsider a continuous variable for the number of characters in an email `num_char`, and a 0/1 binary variable `spam`. \n\n::: {.callout-tip appearance=minimal collapse=true}\n\n## Solution:\nCreate a second variable `var_factor` for plotting and keep the binary `var` as 0/1 for analysis. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$spam_cat <- factor(email$spam, labels=c(\"Ham\", \"Spam\"))\nggplot(email, aes(y=num_char, x=spam_cat)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n\n### Problem: You want to change the legend title for a `fill` or `color` scale.  \n\n::: {.callout-tip appearance=minimal collapse=true}\n\n## Solution:\nAdd the `name=` argument to whatever layer you added that created the legend. Here I speciefied a `fill`, and it was a `discrete` variable. So I use the `scale_fill_discrete()` layer. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(email, aes(y=num_char, x=spam_cat, fill=spam_cat)) + geom_boxplot() + \n  scale_fill_discrete(name=\"Ya like Spam?\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n\n\n\nHere, I `col`ored the points by a discrete variable, so the layer is `scale_color_discrete()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(email, aes(x=num_char, y=line_breaks, col=spam_cat)) + geom_point() +\n  scale_color_discrete(name=\"Ya like Spam?\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-92-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Problem: You want to add means to boxplots. \n\nBoxplots are great. Even better with violin overlays. Know what makes them even better than butter? Adding a point for the mean. `stat_summary` is the layer you want to add. Check out [this stack overflow post](https://stackoverflow.com/questions/23942959/ggplot2-show-separate-mean-values-in-box-plot-for-grouped-data) for more context. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(email, aes(x=spam_cat, y=num_char, fill=spam_cat)) +\n  geom_boxplot() +\n  stat_summary(fun.y=\"mean\", geom=\"point\", size=3, pch=17,color=\"blue\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-93-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-tip appearance=minimal collapse=true}\n\n## Solution:\n\nI suggest playing around with `size` and plotting character `pch` to get a feel for how these work. You can also look at `?pch` (and scroll down in the help file) to see the 25 default plotting characters.\n\n:::\n\n\n## But what about...\n\n* Legend adjustment: remove it, move it to another side, rename it\n* Custom specified colors and shapes\n\nGo [here](http://www.cookbook-r.com/Graphs/) for these. \n\n\n* [Heat maps](https://www.r-bloggers.com/how-to-make-a-simple-heatmap-in-ggplot2/) \n* [Word clouds](https://rpubs.com/brandonkopp/creating-word-clouds-in-r), or [simpler](http://dangoldin.com/2016/06/06/word-clouds-in-r/)\n* Interactive plots - Look into `plotly()` and `ggplotly()`, start with their guide directed towards R users [here](https://plotly.com/ggplot2/getting-started/) or browse the [Plotly R open source graphing library](https://plotly.com/r/)\n\n\n## Additional Resources\n\nFor any Google Search -  be sure to limit searches to within the past year or so. R packages get updated very frequently, and many functions change or become obsolete. \n\n* Comprehensive guides\n  - [R Graphics 2e](https://www.stat.auckland.ac.nz/~paul/RG2e/): The best book about using base graphics\n  - R Graphics Cookbook (Read the book [online](https://r-graphics.org) or buy it on [Amazon](https://www.amazon.com/dp/1491978600)): The best book for using ggplot2 \n  - ggplot2: Elegant Graphics for Data Analysis 3e (Read it [online](http://ggplot2.org/book/) or buy it on [Amazon](http://amzn.com/0387981403))\n\n* Reference and tutorial sites\n  - [STHDA](http://www.sthda.com/english/): Statistical tools for high-throughput data analysis. \n      - [ggplot2 essentials](http://www.sthda.com/english/wiki/ggplot2-essentials)\n      - [Other graphics](http://www.sthda.com/english/articles/32-r-graphics-essentials/)\n  - Quick-R: [Basic Graphs](http://www.statmethods.net/graphs/index.html) and [ggplot2](http://www.statmethods.net/advgraphs/ggplot2.html)\n\n* Help lists \n    - ggplot2 users on [Google groups](http://groups.google.com/group/ggplot2) \n    - [stackoverflow questions tagged ggplot2](http://stackoverflow.com/tags/ggplot2)\n    - Chico R users group ([Events page](https://www.meetup.com/chico-r-users-group/))\n    \n",
    "supporting": [
      "data_viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}